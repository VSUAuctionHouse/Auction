package client.console;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;import java.util.ArrayList;import java.util.Scanner;import Users.GuestUser;import GUI.AuctionService;import GUI.LiveAuctions;import client.ChatClient;import common.*;/** * This class constructs the UI for a chat client.  It implements the * chat interface in order to activate the display() method. * Warning: Some of the code here is cloned in ServerConsole  * * @author Fran&ccedil;ois B&eacute;langer * @author Dr Timothy C. Lethbridge   * @author Dr Robert Lagani&egrave;re * @version July 2000 */public class ClientConsole implements ChatIF{  //Class variables *************************************************	Scanner input = new Scanner(System.in);	int Userid;  /**   * The default port to connect on.   */  final public static int DEFAULT_PORT = 5555;  public Bid current;    //Instance variables **********************************************    /**   * The instance of the client that created this ConsoleChat.   */  static ChatClient client;  static ClientConsole clientUI;    //Constructors ****************************************************  /**   * Constructs an instance of the ClientConsole UI.   *   * @param host The host to connect to.   * @param port The port to connect on.   */  public ClientConsole(String host, int port)   {    try     {      client= new ChatClient(host, port, this);    }     catch(IOException exception)     {      System.out.println("Error: Can't setup connection!"                + " Terminating client.");      System.exit(1);    }  }    //Instance methods ************************************************    /**   * This method waits for input from the console.  Once it is    * received, it sends it to the client's message handler.   */  public void menu()  {	Item i1;	Auction auction;		String menu = "Press 1 to add Item\n";	menu += "Press 2 to test connection\n";	menu += "Press 3 to start Auction\n";	menu += "Press 4 to review Items\n";		menu += "\nPress 0 to Exit\n\n";		System.out.println(menu);		int option1 = input.nextInt();	while (option1 != 0)	{	if(option1 == 1)	{		System.out.println("Enter Item Name");		String name = input.next();		System.out.println("Enter Item Description");		String Desc = input.next();		System.out.println("Enter Item Starting Bid");		double starting_bid = input.nextDouble();		System.out.println("Enter Item Reserve");		double reserve = input.nextDouble();				i1 = new Item(name, Desc, starting_bid, reserve);				client.handleMessageFromClientUI(i1);	}	if(option1 == 2)	{		client.handleMessageFromClientUI("Testing Connection");	}	if(option1 == 3)	{		auction = new Auction();		client.handleMessageFromClientUI(auction);		option1 = 0;		break;	}	if(option1 == 4)	{		ItemsParser ip = new ItemsParser();		ip.parseXmlFile();		ip.parseDocument();		System.out.println(ip.printList());	}	System.out.println(menu);	option1 = input.nextInt();	}  }    public void bid_menu()  {	  String menu = "Current Bid: " + current.getCurrent_bid() + "\nAsking Bid: " + current.getAsking_bid() + "\n\n"; 	  menu += "Press 1 to bid Asking\n";	  menu += "Press 2 to Bid Custom\n";	  	  System.out.println(menu);	  	  int option2 = input.nextInt();		  if(option2 == 1)		  {			  current.setIs_asking_bid(true);			  client.handleMessageFromClientUI(current);		  }		  if(option2 == 2)		  {			  System.out.println("Enter Bid Amount (Must be at least $1 more):\n");			  current.setCustom_bid(input.nextDouble());			  client.handleMessageFromClientUI(current);		  }  }    public void accept()   {	 System.out.println("Connected to server"); 	 // menu();  }    public void getList(){	  client.handleMessageFromClientUI("items");  }  public void setList(ArrayList a1){	  	  AuctionService.setList(a1);  }public void addItem(Item msg) {	// TODO Auto-generated method stub	AuctionService.gotItem(msg);}  public void createUsr(GuestUser newUser)  {	  client.handleMessageFromClientUI(newUser);  }    public void sendNewItem(Item item){	  client.handleMessageFromClientUI(item);  }    public void getItems(String msg){	  client.handleMessageFromClientUI(msg);  }    public void received(String msg) {		// TODO Auto-generated method stub		client.handleMessageFromClientUI(msg);	}  /**   * This method overrides the method in the ChatIF interface.  It   * displays a message onto the screen.   *   * @param message The string to be displayed.   */  public void display(String message)   {    System.out.println(message);  }    //Class methods ***************************************************    /**   * This method is responsible for the creation of the Client UI.   *   * @param args[0] The host to connect to. * @throws IOException    */  public static void main(String[] args)  {	    String host = "";        try    {      host = args[0];    }    catch(ArrayIndexOutOfBoundsException e)    {      host = "173.28.228.47";    }    ClientConsole chat= new ClientConsole(host, DEFAULT_PORT);    chat.accept();  } }//End of ConsoleChat class